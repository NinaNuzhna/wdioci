# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI’s Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: circleci/node:latest-browsers
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb’s install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn
#      - run:
#            name: Get previous results
#            command: |
##                      команда wget загружает из Circleci allure-report, который был сделан в прошлом билде (берется из артифактов), т.е. через API получает json-файл
##                      командой grep забираем ссылку на URL данного отчета
##                      информацию можно найти в док-ции Circleci API/Artifacts
#                       wget $(curl https://circleci.com/api/v1.1/project/github/NinaNuzhna/wdioci/latest/artifacts -H "Circle-Token $CIRCLE_TOKEN" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_%:-]*') -O allure-previous.zip
#                       test -f allure-previous.zip && unzip allure-previous.zip -d allure-previous
#                       npm run test:chrome:headless
#                       cp -r allure-previous/allure-report/history allure-results
#                       npm run report:generate
#                       zip -r allure-report.zip allure-report
##              export ARTIFACT_LINK="https://circleci.com/api/v1.1/project/github/NinaNuzhna/wdioci/latest/artifacts"
##              curl $ARTIFACT_LINK -H "Circle-Token $CIRCLE_TOKEN" | grep -Eoq '(http|https)://[a-zA-Z0-9./?=_%:-]*' && wget $(curl $ARTIFACT_LINK -H "Circle-Token $CIRCLE_TOKEN" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_%:-]*') -O allure-previous.zip
###              командой test мы проверяем есть ли allure-report от предидущего билда (если предидущий билд зафейлился ,то
###              отчета не будет и упадет наш билд) и командой unzip распаковываем отчет в папку allure-previous
##              test -f allure-previous.zip && unzip allure-previous.zip -d allure-previous || echo "Archive not found"
      - run:
          name: Run tests
          command: |
            wget $(curl https://circleci.com/api/v1.1/project/github/NinaNuzhna/wdioci/latest/artifacts -H "Circle-Token $CIRCLE_TOKEN" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_%:-]*') -O allure-previous.zip
            test -f allure-previous.zip && unzip allure-previous.zip -d allure-previous
            npm run test:chrome:headless
            cp -r allure-previous/allure-report/history allure-results
            npm run report:generate
            zip -r allure-report.zip allure-report
      - run:
          when: on_fail
          name: Generate fail results
          command: |
            wget $(curl https://circleci.com/api/v1.1/project/github/bormando/wdioci/latest/artifacts -H "Circle-Token $CIRCLE_TOKEN" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_%:-]*') -O allure-previous.zip
            test -d allure-previous && cp -r allure-previous/allure-report/history allure-results | echo "Previous report directory not found"
            cp -r allure-previous/allure-report/history allure-results
            npm run report:generate
            zip -r allure-report.zip allure-report
      - store_artifacts:
         path: allure-report.zip
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  commit:
    jobs:
      - build-and-test
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-and-test